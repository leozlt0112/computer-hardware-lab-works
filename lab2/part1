/*******************************************************/
/********************Multiplier module********************/
/*****************************************************/
// add additional modules as needs, such as full adder, and others

// multiplier module
module mult
(
	input [7:0] x,
	input [7:0] y,
	output [15:0] out,   // Result of the multiplication
	output [15:0] pp [9] // for automarker to check partial products of a multiplication 
);
	// Declare a 9-high, 16-deep array of signals holding sums of the partial products.
	// They represent the _input_ partial sums for that row, coming from above.
	// The input for the "ninth row" is actually the final multiplier output.
	// The first row is tied to 0.
	assign pp[0] = '0;
	
	// Make another array to hold the carry signals
	logic [16:0] cin[9];
	assign cin[0] = '0;
	
	// Cin signals for the final (fast adder) row
	logic [16:8] cin_final;
	// cin signal to 0 
	assign cin_final[8] = '0;
	genvar i;
	genvar j;
	generate
		for (i=0; i<8; i++) begin
			for (j=0; j<=15; j++) begin
				if((j-i) <= 7 && j>=i) begin  
						full_adder fa_ins(.a(y[i] & x[j-i]), 
						.b(pp[i][j]), 
						.cin(cin[i][j]), 
						.cout(cin[i+1][j+1]), 
						.s(pp[i+1][j]));
				end 
				else begin 
					assign pp[i+1][j]=pp[i][j];
				end 
			end 
		end
	endgenerate	
	genvar lastcol;
	generate 
		for (lastcol=8; lastcol<=15; lastcol++)  begin 
			full_adder fa_inst(.a(pp[8][lastcol]), 
			.b(cin[8][lastcol]), 
			.cin(cin_final[lastcol]), 
			.cout(cin_final[lastcol+1]), 
			.s(out[lastcol]));
		end 
	endgenerate
	//assign out[15:8]= pp[9][15:8];
		
	// TODO: complete the following digital logic design of a carry save multiplier (unsigned)
	// Note: generate_hw tutorial can help you describe duplicated modules efficiently
	
	// Note: partial product of each row is the result coming out from a full adder at the end of that row
	
	// Note: a "Fast adder" operates on columns 8 through 15 of final row.
	
	assign out[7:0] = pp[8][7:0];
		  
endmodule

// The following code is provided for you to use in your design

module full_adder(
    input a,
    input b,
    input cin,
    output cout,
    output s
);

assign s = a ^ b ^ cin;
assign cout = a & b | (cin & (a ^ b));

endmodule
